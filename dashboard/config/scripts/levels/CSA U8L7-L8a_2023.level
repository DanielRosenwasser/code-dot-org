<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Sorter</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">squareList</code> method to return a new 1D array containing the squares of each value in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">data</code>.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">Sorter</code> class, write the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortList</code> method to sort an array from the smallest to the largest value using either a selection sort, insertion sort, or merge sort.\r\n\r\n‚úÖ **TO DO #3:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">SortRunner</code> class, call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">squareList()</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortList()</code> methods to create and print 1D arrays that contain the squares of each value in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">firstSet</code> and <code style=\"background-color: #ececec; color: black; font-weight: bold;\">secondSet</code> in order from the smallest to the largest value.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with implementing a sorting algorithm.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "start_sources": {
      "SortRunner.java": {
        "text": "public class SortRunner {\n  public static void main(String[] args) {\n\n    int[] firstSet = {8, 4, 10, 2, 6};\n    int[] secondSet = {-3, 5, 0, -6, 3};\n\n    System.out.println(\"----------First Set----------\");\n    System.out.println(Sorter.arrayToString(firstSet));\n\n    System.out.println(\"\\n----------Second Set----------\");\n    System.out.println(Sorter.arrayToString(secondSet));\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the squareList() and sortList() methods and print the updated arrays.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      },
      "Sorter.java": {
        "text": "/*\n * Manages and sorts lists\n */\npublic class Sorter {\n\n  /*\n   * Returns an array containing the squares of each value in data.\n   */\n  public static int[] squareList(int[] data) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return a new array containing the squares of each value in data.\n     * -----------------------------------------------------------------------------\n     */\n\n\n    return null;\n  }\n\n  /*\n   * Sorts an array from smallest to largest value\n   */\n  public static void sortList(int[] data) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Implement a sorting algorithm to sort the 1D array data.\n     * -----------------------------------------------------------------------------\n     */\n    \n\n    \n  }\n\n  /*\n   * Returns a String containing each element in data\n   */\n  public static String arrayToString(int[] data) {\n    String result = \"\";\n    \n    for (int value : data) {\n      result += value + \" \";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      }
    },
    "reference_links": [
      "/courses/csa-2023/guides/selection-sort",
      "/courses/csa-2023/guides/insertion-sort",
      "/courses/csa-2023/guides/merge-sort"
    ],
    "video_key": "csa_sorting_algorithms",
    "display_name": "Sorting Squares",
    "bubble_choice_description": "Sort arrays with the squares of the values in a 1D array in order from the smallest value to the largest value.",
    "thumbnail_url": "https://images.code.org/691a365dc6756c3c14068becbf681742-calculator.png",
    "encrypted_validation": "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\n",
    "encrypted_exemplar_sources": "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\nuCNVila5PkYamzTKsfjJ55X+rKfqCe2I1QU=\n"
  },
  "game_id": 68,
  "created_at": "2023-04-14T14:10:06.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T14:10:06.283+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L7d_2023\\\"\"],\"cloned_from\":\"CSA U8L7-L7d_2023\"},{\"changed_at\":\"2023-04-14 14:10:07 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:18:45 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:19:46 +0000\",\"changed\":[\"encrypted_examples\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:36:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:36:47 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:46:28 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:46:39 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:47:04 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
