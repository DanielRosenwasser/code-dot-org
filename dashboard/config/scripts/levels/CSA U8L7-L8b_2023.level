<Javalab>
  <config><![CDATA[{
  "properties": {
    "encrypted": "false",
    "long_instructions": "An event manager frequently hosts events and wants to determine which person attends at least 25% of the events. They have an unsorted list of attendees for the last several events.\r\n\r\n‚úÖ **TO DO #1:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">EventManager</code> class, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortAttendees()</code> to sort <code style=\"background-color: #ececec; color: black; font-weight: bold;\">attendees</code> in alphabetical (A to Z) order using a selection, insertion, or merge sort.\r\n\r\n‚úÖ **TO DO #2:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">EventManager</code> class, write the method <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getFrequent()</code> to find and return the attendee that is in <code style=\"background-color: #ececec; color: black; font-weight: bold;\">attendees</code> at least 25% of the time.\r\n\r\n   * Find the minimum number of times an attendee would need to attend by multiplying the length of the array by <code style=\"background-color: #ececec; color: black; font-weight: bold;\">0.25</code>.\r\n   \r\n   * Traverse the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">attendees</code> array. If the attendee at the current index is the same as the attendee at the index plus the minimum number of times, return the attendee at the current index.\r\n   \r\n   * If no attendee appears in the list at least 25% of the time, return <code style=\"background-color: #ececec; color: black; font-weight: bold;\">\"none\"</code>.\r\n\r\n‚úÖ **TO DO #3:** In the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">EventRunner</code> class,\r\n\r\n1. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">sortAttendees()</code> method and print the updated array.\r\n\r\n2. Call the <code style=\"background-color: #ececec; color: black; font-weight: bold;\">getFrequent()</code> method and print the result.\r\n\r\n<div style=\"background-color: #E0D1EC; border: 1px solid #9660bf; border-radius: 5px; font-size: 1.1em; padding: 15px; margin-bottom: 10px;\">\r\nüí° <strong>TIP:</strong> Check out the <strong>Help & Tips</strong> tab ‚¨ÜÔ∏è for help with implementing a sorting algorithm.\r\n</div>",
    "mini_rubric": "false",
    "submittable": "false",
    "hide_share_and_remix": "false",
    "csa_view_mode": "console",
    "reference_links": [
      "/courses/csa-2023/guides/selection-sort",
      "/courses/csa-2023/guides/insertion-sort",
      "/courses/csa-2023/guides/merge-sort"
    ],
    "video_key": "csa_sorting_algorithms",
    "display_name": "Event Attendees",
    "bubble_choice_description": "An event manager frequently hosts events and wants to determine which person attends at least 25% of the events. They have an unsorted list of attendees for the last several events.",
    "thumbnail_url": "https://images.code.org/64b2cd00a2472eb4d226a2cf2f07d8e9-event.png",
    "encrypted_validation": "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\nMzXh6rZTpx5rDiJsrAAXdm3rhnJC\n",
    "start_sources": {
      "EventManager.java": {
        "text": "/*\n * Manages lists of attendees that have attended events\n */\npublic class EventManager {\n\n  /*\n   * Sorts the list of attendees in alphabetical (A to Z) order\n   */\n  public static void sortAttendees(String[] attendees) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Sort the 1D array of attendees using a selection, insertion, or merge sort.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n  }\n\n  /*\n   * Finds the attendee that is on the list more than 25% of the time\n   */\n  public static String getFrequent(String[] attendees) {\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Return the attendee that appears in attendees at least 25% of the time.\n     * -----------------------------------------------------------------------------\n     */\n\n    \n    return \"\";\n  }\n\n  /*\n   * Returns a String containing each attendee in attendees\n   */\n  public static String arrayToString(String[] attendees) {\n    String result = \"\";\n    \n    for (String person : attendees) {\n      result += person + \" \";\n    }\n\n    return result;\n  }\n  \n}",
        "isVisible": true,
        "tabOrder": 1
      },
      "EventRunner.java": {
        "text": "public class EventRunner {\n  public static void main(String[] args) {\n\n    String[] attendees = {\"Kaia\", \"Payton\", \"Amira\", \"Kaia\", \"Kaleb\",\n                          \"Juliana\", \"Noelle\", \"Kaia\", \"Sara\", \"Presley\"};\n    \n    System.out.println(\"----------Unsorted List of Attendees----------\");\n    System.out.println(EventManager.arrayToString(attendees));\n\n    System.out.println(\"\\n----------Sorted List of Attendees----------\");\n\n    /* ----------------------------------- TO DO -----------------------------------\n     * ‚úÖ Call the sortAttendees() and getFrequent() methods and print the\n     * updated list and result.\n     * -----------------------------------------------------------------------------\n     */\n\n\n\n    \n    \n  }\n}",
        "isVisible": true,
        "tabOrder": 0
      }
    },
    "encrypted_exemplar_sources": "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\noEYG+ac3YhiRZfwoaw==\n"
  },
  "game_id": 68,
  "created_at": "2023-04-14T14:10:15.000Z",
  "level_num": "custom",
  "user_id": 16889,
  "published": true,
  "audit_log": "[{\"changed_at\":\"2023-04-14T14:10:15.552+00:00\",\"changed\":[\"cloned from \\\"CSA U8L7-L8a_2023\\\"\"],\"cloned_from\":\"CSA U8L7-L8a_2023\"},{\"changed_at\":\"2023-04-14 14:10:16 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:24:11 +0000\",\"changed\":[\"long_instructions\",\"contained_level_names\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:51:54 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:53:44 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:55:40 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:55:42 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:55:49 +0000\",\"changed\":[],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"},{\"changed_at\":\"2023-04-21 01:56:14 +0000\",\"changed\":[\"start_sources\"],\"changed_by_id\":16889,\"changed_by_email\":\"jamila+lb@code.org\"}]"
}]]></config>
</Javalab>
